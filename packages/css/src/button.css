.ds-button {
  --dsc-button-background--active: var(--ds-color-base-active);
  --dsc-button-background--hover: var(--ds-color-base-hover);
  --dsc-button-background: var(--ds-color-base-default);
  --dsc-button-color: var(--ds-color-base-contrast-default);
  --dsc-button-color--hover: var(--ds-color-base-contrast-default);
  --dsc-button-border-width: var(--ds-border-width-default);
  --dsc-button-border-style: solid;
  --dsc-button-border-color: transparent;
  --dsc-button-gap: var(--ds-size-2);
  --dsc-button-padding: var(--ds-size-2) var(--ds-size-4);
  --dsc-button-size: var(--ds-size-12);

  align-items: center;
  background: var(--dsc-button-background);
  border-radius: var(--ds-border-radius-default);
  border-width: var(--dsc-button-border-width);
  border-style: var(--dsc-button-border-style);
  border-color: var(--dsc-button-border-color);
  box-sizing: border-box;
  color: var(--dsc-button-color);
  cursor: pointer;
  font-family: inherit;
  font-weight: var(--ds-font-weight-medium);
  gap: var(--dsc-button-gap);
  height: fit-content; /* If placed in flex container */
  justify-content: center;
  line-height: var(--ds-line-height-sm);
  min-height: var(--dsc-button-size);
  min-width: var(--dsc-button-size);
  outline: none;
  padding: var(--dsc-button-padding);
  text-align: inherit;
  text-decoration: none;

  @composes ds-print-preserve from './base.css';
  @composes ds-focus from './base.css';

  &[data-variant='secondary'],
  &[data-variant='tertiary'] {
    --dsc-button-background: transparent;
    --dsc-button-background--active: var(--ds-color-surface-active);
    --dsc-button-background--hover: var(--ds-color-surface-hover);
    --dsc-button-color: var(--ds-color-text-subtle);
    --dsc-button-color--hover: var(--ds-color-text-default);
  }
  &[data-variant='secondary'] {
    --dsc-button-border-color: var(--ds-color-border-strong);
  }

  &:not([data-size]) {
    font-size: inherit; /* Ensure inheriting font-size when <button> */
  }

  & :where(img, svg) {
    flex-shrink: 0;
    font-size: 1.25em;
  }

  &:focus-visible {
    position: relative; /* Place focusring on top */
  }

  &:where(:not([hidden])) {
    display: flex;
  }

  &[data-icon] {
    width: var(--dsc-button-size); /* Ensure it keeps square shape */
    height: var(--dsc-button-size); /* Ensure it keeps square shape */
    padding: 0;
  }

  &[data-fullwidth] {
    width: 100%;
    text-align: center;
  }

  /* Style spinner when in button */
  & .ds-spinner {
    font-size: 1.4em;
  }

  /**
   * States
   */

  @media (hover: hover) and (pointer: fine) {
    /* Only use hover for non-touch devices to prevent sticky-hovering, using :where to prevent adding specificity */
    &:where(:not(:disabled, [aria-disabled='true'], [aria-busy='true'])):hover {
      background: var(--dsc-button-background--hover);
      color: var(--dsc-button-color--hover);
    }
  }

  &[aria-busy='true'] {
    cursor: progress;
  }

  &:is(:disabled, [aria-disabled='true']) {
    cursor: not-allowed;
    opacity: var(--ds-opacity-disabled);

    /* When both aria-disabled and aria-busy is true, opacity should be 1 and cursor should be progress */
    &[aria-busy='true'] {
      opacity: 1;
      cursor: progress;
    }
  }

  /* Using :where to prevent adding specificity */
  &:where(:not(:disabled, [aria-disabled='true'], [aria-busy='true'])):active {
    background: var(--dsc-button-background--active);
  }
}
