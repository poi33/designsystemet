.ds-card {
  --dsc-card-background--active: var(--ds-color-surface-active);
  --dsc-card-background--hover: var(--ds-color-surface-hover);
  --dsc-card-background: var(--ds-color-surface-default);
  --dsc-card-border-width: var(--ds-border-width-default);
  --dsc-card-border-style: solid;
  --dsc-card-border-color: var(--ds-color-border-subtle);
  --dsc-card-block-border-width: var(--dsc-card-border-width);
  --dsc-card-block-border-style: var(--dsc-card-border-style);
  --dsc-card-block-border-color: var(--dsc-card-border-color);
  --dsc-card-color: var(--ds-color-text-default);
  --dsc-card-content-margin-block: var(--ds-size-3) 0;
  --dsc-card-padding: var(--ds-size-6);
  --dsc-card-border-radius: var(--ds-border-radius-lg);

  background: var(--dsc-card-background);
  border-radius: var(--dsc-card-border-radius);
  border-width: var(--dsc-card-border-width);
  border-style: var(--dsc-card-border-style);
  border-color: var(--dsc-card-border-color);
  box-sizing: border-box;
  color: var(--dsc-card-color);
  font-family: inherit;
  margin: 0;
  overflow: clip; /* Needed to clip media elements and and Card.Block */
  padding: var(--dsc-card-padding);
  text-align: inherit;

  &[data-variant='default'] {
    background: var(--ds-color-surface-default);
  }

  &[data-variant='tinted'] {
    background: var(--ds-color-surface-tinted);
  }

  &:not([hidden]) {
    display: block;
  }

  &:not([data-size]) {
    font-size: inherit; /* Ensure inheriting font-size when <button> */
  }

  /* Style link in heading, or heading when Card is anchor */
  :is(h1, h2, h3, h4, h5, h6) a:any-link /* Using :any-link to target both a and a:visited */,
  &:is(a:any-link, button, [role='button']) :is(h1, h2, h3, h4, h5, h6) {
    color: inherit;
    outline: 0;
    text-decoration: underline;
    text-decoration-thickness: max(1px, 0.0625rem, 0.1025em);
    text-underline-offset: max(6px, 0.25rem, 0.22em);

    /* reset .ds-link focus styles */
    &.ds-link {
      &:focus-visible {
        background: none;
        color: inherit;
        outline: 0;
      }

      &:active {
        background: none;
        color: inherit;
      }
    }
  }

  /* Add states when Card is a anchor, button, or when containing a anchor in heading */
  &:where(a, button, [role='button']),
  &:where(:has(:is(h1, h2, h3, h4, h5, h6) a)) {
    cursor: pointer;
    text-decoration: none;

    @media (hover: hover) and (pointer: fine) {
      &:hover {
        background: var(--dsc-card-background--hover);
      }
    }

    &:where(:focus-visible, :has(:focus-visible)) {
      @composes ds-focus--visible from './base.css';
    }

    &:active {
      background: var(--dsc-card-background--active);
    }
  }

  &:has(> .ds-card__block, .ds-details) {
    padding: 0; /* Let Card.Block own the padding */
  }

  & > .ds-details:first-child {
    border-top: 0;
  }
  & > .ds-details:last-child {
    border-bottom: 0;
  }
}

/* Using :where to overwrite user agent CSS, but not our own CSS */
:where(.ds-card, .ds-card__block) {
  & > :first-child {
    margin-block: 0;
  }

  & > * + * {
    margin-block: var(--dsc-card-content-margin-block); /* https://every-layout.dev/layouts/stack/ */
  }
}

.ds-card__block {
  box-sizing: border-box;
  margin: 0;
  padding: var(--dsc-card-padding);
  position: relative;

  /* Needed to support automatic separator border between both vertical and horizontal stacking Card.Block: */
  &::before {
    content: '';
    border-top-width: var(--dsc-card-block-border-width);
    border-top-style: var(--dsc-card-block-border-style);
    border-color: var(--dsc-card-block-border-color);
    position: absolute;
    inset: 0 0 auto;
    translate: 0 -100%;
  }

  &::after {
    content: '';
    border-left-width: var(--dsc-card-block-border-width);
    border-left-style: var(--dsc-card-block-border-style);
    border-color: var(--dsc-card-block-border-color);
    position: absolute;
    inset: 0 auto 0 0;
    translate: -100%;
  }

  &:has(> :is(audio, figure, iframe, img, video):only-child) {
    padding: 0;

    & > :not([hidden]) {
      border: 0;
      display: block;
      height: auto;
      width: 100%;
    }

    & > iframe {
      aspect-ratio: 16 / 9; /* Make iframes scale responsively */
    }
  }
}
