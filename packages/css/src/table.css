.ds-table {
  --dsc-table-background--hover: var(--ds-color-surface-hover);
  --dsc-table-background--zebra: var(--ds-color-surface-tinted);
  --dsc-table-background: transparent;
  --dsc-table-border-color: var(--ds-color-border-subtle);
  --dsc-table-border-radius: var(--ds-border-radius-md);
  --dsc-table-border-style: solid;
  --dsc-table-border-width: var(--ds-border-width-default);
  --dsc-table-color: var(--ds-color-text-default);
  --dsc-table-divider-border-color: var(--dsc-table-border-color);
  --dsc-table-divider-border-style: solid;
  --dsc-table-divider-border-width: calc(var(--ds-border-width-default) + 1px);
  --dsc-table-header-background--hover: var(--ds-color-surface-hover);
  --dsc-table-header-background--sorted: var(--ds-color-surface-tinted);
  --dsc-table-header-background--sticky: var(--ds-color-surface-default);
  --dsc-table-header-background: transparent;
  --dsc-table-padding: var(--ds-size-2) var(--ds-size-3);
  --dsc-table-sort-size: var(--ds-size-6);

  border-collapse: separate; /* Using separate mode to enable border-radius */
  border-spacing: 0;
  box-sizing: border-box;
  color: var(--dsc-table-color);
  width: 100%;

  & > :is(tbody, thead, tfoot) > tr > :is(th, td) {
    background: var(--dsc-table-background);
    border-bottom-width: var(--dsc-table-border-width);
    border-bottom-style: var(--dsc-table-border-style);
    border-color: var(--dsc-table-border-color);
    padding: var(--dsc-table-padding);
    text-align: inherit;
  }

  & th {
    font-weight: var(--ds-font-weight-semibold);
  }

  & > thead > tr > :is(th, td) {
    background: var(--dsc-table-header-background);
  }

  & > thead > tr:last-child > :is(th, td) {
    border-bottom-width: var(--dsc-table-divider-border-width);
    border-bottom-style: var(--dsc-table-divider-border-style);
    border-bottom-color: var(--dsc-table-divider-border-color);
  }

  & > tbody:has(+ tfoot) > tr:last-child > :is(th, td) {
    border-bottom: none; /* Skip border-bottom when followed by <tfoot> */
  }

  & > tfoot > tr:first-child > :is(th, td) {
    background: var(--dsc-table-header-background);
    border-top-width: var(--dsc-table-divider-border-width);
    border-top-style: var(--dsc-table-divider-border-style);
    border-top-color: var(--dsc-table-divider-border-color);
  }

  & > tfoot > tr:last-child > :is(th, td) {
    border-bottom: none;
  }

  & > caption {
    @composes ds-heading from './heading.css';
    text-align: inherit;
    margin-bottom: var(--ds-size-1);
  }

  /**
   * Sorting
   */
  & > thead > tr > [aria-sort] {
    cursor: pointer;
    padding: 0;

    & > button {
      background: none;
      border: 0;
      box-sizing: border-box;
      color: inherit;
      cursor: pointer;
      font: inherit;
      padding: var(--dsc-table-padding);
      text-align: inherit;
      width: 100%;

      @composes ds-focus from './base.css';

      &:not([hidden]) {
        display: block;
      }

      &:focus-visible {
        position: relative; /* Place on top when painting focus border */
      }

      &::after {
        background: currentcolor;
        content: '';
        display: inline-block;
        height: var(--dsc-table-sort-size);
        mask:
          center / contain no-repeat
          url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M12.53 4.47a.75.75 0 0 0-1.06 0l-3.5 3.5a.75.75 0 0 0 1.06 1.06L12 6.06l2.97 2.97a.75.75 0 1 0 1.06-1.06zm-3.5 10.5a.75.75 0 0 0-1.06 1.06l3.5 3.5a.75.75 0 0 0 1.06 0l3.5-3.5a.75.75 0 1 0-1.06-1.06L12 17.94z'/%3E%3C/svg%3E");
        vertical-align: middle;
        width: var(--dsc-table-sort-size);
      }
    }

    &[aria-sort='ascending'] > button::after {
      mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M11.47 7.97a.75.75 0 0 1 1.06 0l5.5 5.5a.75.75 0 1 1-1.06 1.06L12 9.56l-4.97 4.97a.75.75 0 0 1-1.06-1.06z'/%3E%3C/svg%3E");
    }

    &[aria-sort='descending'] > button::after {
      mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M5.97 9.47a.75.75 0 0 1 1.06 0L12 14.44l4.97-4.97a.75.75 0 1 1 1.06 1.06l-5.5 5.5a.75.75 0 0 1-1.06 0l-5.5-5.5a.75.75 0 0 1 0-1.06'/%3E%3C/svg%3E");
    }

    &:not([aria-sort='none']) > button {
      background: var(--dsc-table-header-background--sorted);
    }
  }

  /**
   * Configurations
   */
  &[data-border] {
    border-radius: var(--dsc-table-border-radius);
    border-width: var(--dsc-table-border-width);
    border-style: var(--dsc-table-border-style);
    border-color: var(--dsc-table-border-color);

    & > :last-child > tr:last-child > :is(th, td) {
      border-bottom: none; /* Skip last border-bottom when <table> has border */
    }

    /* Add rounded border to first and last row */

    &
      > :is(
        thead:first-of-type /* If first <thead>, but using :first-of-type to support <caption> */,
        :not(:has(thead)) tbody:first-of-type /* If <tbody> is :first-of-type and not followed by <thead> */
      )
      > tr:first-child
      > :is(th, td) {
      &:first-child {
        border-top-left-radius: var(--dsc-table-border-radius);
      }

      &:last-child {
        border-top-right-radius: var(--dsc-table-border-radius);
      }
    }

    /* Add rounded border to last row (using :last-of-type to suppoert <caption>) */
    &
      > :is(
        tfoot:last-of-type /* If first <thead>, but using :first-of-type to support <caption> */,
        :not(:has(tfoot)) tbody:last-of-type /* If <tbody> is :first-of-type and not followed by <thead> */
      )
      > tr:last-child
      > :is(th, td) {
      &:first-child {
        border-bottom-left-radius: var(--dsc-table-border-radius);
      }

      &:last-child {
        border-bottom-right-radius: var(--dsc-table-border-radius);
      }
    }
  }

  &[data-sticky-header] {
    position: relative;
    overflow: auto;

    & > thead > tr > :is(th, td) {
      background: var(--dsc-table-header-background--sticky);
      position: sticky;
      top: 0;
      z-index: 2;
    }
  }

  &[data-zebra] > tbody > tr > :is(th, td) {
    border-block: 0;
  }
  &[data-zebra] > :is(thead, tbody) > tr:nth-child(even) > :is(th, td) {
    background: var(--dsc-table-background--zebra);
  }

  /**
   * States
   */
  @media (hover: hover) and (pointer: fine) {
    &[data-hover] > tbody > tr:hover > :is(th, td) {
      background: var(--dsc-table-background--hover);
    }

    & > thead > tr > [aria-sort]:hover button {
      background: var(--dsc-table-header-background--hover);
    }
  }
}
